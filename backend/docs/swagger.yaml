openapi: 3.0.0
info:
  title: Smart Micro-Inventory API
  description: API documentation for inventory system
  version: 1.0.0
servers:
  - url: http://localhost:5000
paths:
  /api/products:
    get:
      summary: Get all products
      description: Fetch all products from the inventory
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: 64ad8fbc9a8f7e12345abcd1
                    name:
                      type: string
                      example: Laptop
                    price:
                      type: number
                      example: 1200
                    stock:
                      type: integer
                      example: 10
    post:
      summary: Create a new product
      description: Add a new product to the inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - stock
              properties:
                name:
                  type: string
                  example: Smartphone
                price:
                  type: number
                  example: 799
                stock:
                  type: integer
                  example: 25
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64ad8fbc9a8f7e12345abcd1
                  name:
                    type: string
                    example: Smartphone
                  price:
                    type: number
                    example: 799
                  stock:
                    type: integer
                    example: 25
        "400":
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Name, price and stock are required
  /api/products/{id}:
    get:
      summary: Get a product by ID
      description: Fetch a single product using its unique ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      responses:
        "200":
          description: A single product object
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64ad8fbc9a8f7e12345abcd1
                  name:
                    type: string
                    example: Laptop
                  price:
                    type: number
                    example: 1200
                  stock:
                    type: integer
                    example: 10
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
    put:
      summary: Update a product by ID
      description: Update an existing productâ€™s details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Gaming Laptop
                price:
                  type: number
                  example: 1500
                stock:
                  type: integer
                  example: 8
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 64ad8fbc9a8f7e12345abcd1
                  name:
                    type: string
                    example: Gaming Laptop
                  price:
                    type: number
                    example: 1500
                  stock:
                    type: integer
                    example: 8
        "400":
          description: Bad request (validation error)
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
    delete:
      summary: Delete a product by ID
      description: Remove a product from the inventory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The product ID
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product not found
